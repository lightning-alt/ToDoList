<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartTask - Modern Todo List</title>
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --light: #ecf0f1;
            --danger: #e74c3c;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', sans-serif;
        }

        body {
            min-height: 100vh;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .welcome-section {
            text-align: center;
            margin-bottom: 2rem;
        }

        .welcome-section h1 {
            color: var(--primary);
            margin-bottom: 1rem;
        }

        .task-form {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        input[type="text"] {
            flex: 1;
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: var(--secondary);
        }

        button {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 8px;
            background: var(--secondary);
            color: white;
            cursor: pointer;
            transition: transform 0.2s ease, background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }

        .task-list {
            list-style: none;
        }

        .task-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: var(--light);
            margin-bottom: 0.5rem;
            border-radius: 8px;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .task-item.completed {
            background: #f8f9fa;
            opacity: 0.7;
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
            color: #95a5a6;
        }

        .task-checkbox {
            margin-right: 1rem;
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .task-text {
            flex: 1;
            margin-right: 1rem;
        }

        .delete-btn {
            background: var(--danger);
            padding: 0.5rem 1rem;
            margin-left: auto;
        }

        .name-form {
            text-align: center;
            max-width: 400px;
            margin: 2rem auto;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="name-form" id="nameForm">
        <h1>Welcome to SmartTask! ðŸ‘‹</h1>
        <form onsubmit="handleNameSubmit(event)">
            <input type="text" id="userName" placeholder="Enter your name" required>
            <button type="submit">Start Organizing</button>
        </form>
    </div>

    <div class="container hidden" id="appContainer">
        <div class="welcome-section">
            <h1>Welcome back, <span id="userNameDisplay"></span>! ðŸŽ¯</h1>
        </div>
        
        <form class="task-form" onsubmit="handleTaskSubmit(event)">
            <input type="text" id="taskInput" placeholder="What needs to be done?">
            <button type="submit">Add Task</button>
        </form>

        <ul class="task-list" id="taskList"></ul>
    </div>

    <script>
        // User Name Handling
        function handleNameSubmit(event) {
            event.preventDefault();
            const userName = document.getElementById('userName').value;
            localStorage.setItem('userName', userName);
            initializeApp();
        }

        function initializeApp() {
            const userName = localStorage.getItem('userName');
            if (userName) {
                document.getElementById('nameForm').classList.add('hidden');
                document.getElementById('appContainer').classList.remove('hidden');
                document.getElementById('userNameDisplay').textContent = userName;
                loadTasks();
            }
        }

        // Task Handling
        let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        function loadTasks() {
            const taskList = document.getElementById('taskList');
            taskList.innerHTML = '';
            
            tasks.forEach((task, index) => {
                const taskItem = document.createElement('li');
                taskItem.className = `task-item ${task.completed ? 'completed' : ''}`;
                taskItem.innerHTML = `
                    <input type="checkbox" 
                           class="task-checkbox" 
                           ${task.completed ? 'checked' : ''}
                           onchange="toggleTask(${index})">
                    <span class="task-text">${task.text}</span>
                    <button class="delete-btn" onclick="deleteTask(${index})">Delete</button>
                `;
                taskList.appendChild(taskItem);
            });
        }

        function handleTaskSubmit(event) {
            event.preventDefault();
            const taskInput = document.getElementById('taskInput');
            const text = taskInput.value.trim();
            
            if (text) {
                tasks.push({ text, completed: false });
                taskInput.value = '';
                saveTasks();
                loadTasks();
            }
        }

        function toggleTask(index) {
            tasks[index].completed = !tasks[index].completed;
            saveTasks();
            loadTasks();
        }

        function deleteTask(index) {
            tasks = tasks.filter((_, i) => i !== index);
            saveTasks();
            loadTasks();
        }

        // Initialize app if user is already logged in
        window.onload = initializeApp;
    </script>
</body>
</html>
